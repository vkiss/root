/**
 * media query mixin
 *              (yes, it can be nested)
 *
 * use case sample #1:
 * @include mq(900)
 * -> @media screen and (max-width: 900px)
 *
 * use case sample #2:
 * @include mq(901, min)
 * -> @media screen and (min-width: 901px)
 *
 * use case sample #3:
 * @include mq(768, 1024)
 * -> @media screen and (min-width: 768px) and (max-width: 1024px)
 *
 * use case sample #4:
 * @include mq(1200, 600)
 * -> @media screen and (min-width: 600px) and (max-width: 1200px)
 */

@mixin mq($size, $minmax: max) {
  $minmaxRender: "";

  @if $minmax == min {
    $minmaxRender: "min-width";
  }

  @else {
    $minmaxRender: "max-width";
  }

  @if type-of($minmax) == "number" {
    @if $size > $minmax {
      @media screen and (min-width: #{$minmax}px) and (max-width: #{$size}px) {
        @content;
      }
    }

    @else {
      @media screen and (min-width: #{$size}px) and (max-width: #{$minmax}px) {
        @content;
      }
    }
  }

  @else {
    @media screen and (#{$minmaxRender}: #{$size}px) {
      @content;
    }
  }
}

@mixin mobile {
  @include mq($mobile-resolution - 1) {
    @content;
  }
}

@mixin not-mobile {
  @include mq($mobile-resolution, min) {
    @content;
  }
}

@mixin paint-svg($color) {
  rect,
  ellipse,
  circle,
  path {
    fill: $color;
  }
}

/**
 * app container and second app configs
 */

@mixin main-app-container() {
  display: flex;
  flex-grow: 1;
  align-items: center;
}

@mixin second-app-container-shared-config() {
  @include main-app-container;
}

@mixin main-app-element-controller( $transition-config: "" ) {
  $transition_value: opacity .2s;

  @if ( $transition-config ) {
    $transition_value: #{$transition_value}, #{$transition-config};
  }

  opacity: 1;
  transition: $transition_value;

  .--run-on-bg & {
    opacity: 0;
  }

  .--run-on-bg-finish & {
    display: none;
  }
}
